import sys 
import ijson

# State machine class
class StateMachine:
    def __init__(self):
        self.state = 'initial'

    def event(self, event, prefix, data):
        if self.state == 'initial' and event == 'start_map':
            print("Transitioning from 'initial' to 'map_started'")
            self.state = 'map_started'
        elif self.state == 'map_started' and event == 'map_key':
            print("Transitioning from 'map_started' to 'mapping'")
            self.state = 'mapping'
        elif self.state == 'map_started' and event == 'end_map':
            print("Transitioning from 'map_started' to 'map_ended'")
            self.state = 'map_ended'
        elif self.state == 'mapping' and event == 'start_map':
            print("Transitioning from 'mapping' to 'map_started'")
            self.state = 'map_started'
        elif self.state == 'mapping' and event == 'start_array':
            print("Transitioning from 'mapping' to 'array_started'")
            self.state = 'array_Started'
        elif self.state == 'mapping' and event == 'number':
            print("Transitioning from 'mapping' to 'mapped'")
            self.state = 'mapped'
        elif self.state == 'mapping' and event == 'string':
            print("Transitioning from 'mapping' to 'mapped'")
            self.state = 'mapped'
        elif self.state == 'mapping' and event == 'boolean':
            print("Transitioning from 'mapping' to 'mapped'")
            self.state = 'mapped'
        elif self.state == 'array_Started' and event == 'start_map':
            print("Transitioning from 'array_started' to 'map_started'")
            self.state = 'map_started'
        elif self.state == 'mapping' and event == 'end_array':
            print("Transitioning from 'array_started' to 'array_ended'")
            self.state = 'array_ended'
        elif self.state == 'mapped' and event == 'map_key':
            print("Transitioning from 'mapped' to 'mapping'")
            self.state = 'mapping'
        elif self.state == 'mapped' and event == 'end_map':
            print("Transitioning from 'mapped' to 'map_ended'")
            self.state = 'map_ended'
        elif self.state == 'map_ended' and event == 'end_array':
            print("Transitioning from 'map_ended' to 'array_ended'")
            self.state = 'array_ended'
        elif self.state == 'map_ended' and event == 'start_map':
            print("Transitioning from 'map_ended' to 'map_started'")
            self.state = 'map_started'
        elif self.state == 'map_ended' and event == 'start_map':
            print("Transitioning from 'map_ended' to 'map_started'")
            self.state = 'map_started'
        elif self.state == 'map_ended' and event == 'map_key':
            print("Transitioning from 'map_ended' to 'mapping'")
            self.state = 'mapping'
        elif self.state == 'array_ended' and event == 'map_key':
            print("Transitioning from 'array_ended' to 'mapping'")
            self.state = 'mapping'
        elif self.state == 'array_ended' and event == 'end_map':
            print("Transitioning from 'array_ended' to 'final'")
            self.state = 'final'
        else:
            print("Invalid transition")

# Create an instance of the state machine
sm = StateMachine()

# Perform transitions
sm.transition('start')   # Transition from 'initial' to 'running'
sm.transition('pause')  # Transition from 'running' to 'paused'
sm.transition('resume') # Transition from 'paused' to 'running'
sm.transition('stop')   # Transition from 'running' to 'stopped'
sm.transition('start')  # Transition from 'stopped' to 'running'
sm.transition('stop')   # Transition from 'running' to 'stopped'
sm.transition('resume') # Invalid transition



# Json file event process
def event_process(prefix, event, value):
    print("oi")

# Process the json file generated by the lncli describegraph 
def process_graph(json_file):

    nodes = {}
    edges = {}

    # Open the JSON file for reading
    with open(json_file, 'r') as file:
        # Create an iterator for the JSON data
        parser = ijson.parse(file)
    
        # Iterate over each JSON event
        for prefix, event, value in parser:
        # Check if the event corresponds to the start of a new item (node or edge)
            if event == 'start_map':
                current_item = {}

            # Check if the event corresponds to a key in the current item
            elif event == 'map_key':
                key = value

            # Check if the event corresponds to a value in the current item
            elif event == 'string':
                # Assign the value to the corresponding key in the current item
                current_item[key] = value

            # Check if the event corresponds to a value in the current item
            elif event == 'number':
                # Assign the value to the corresponding key in the current item
                current_item[key] = value

            # Check if the event corresponds to the end of an item
            elif event == 'end_map':
                # Determine whether the item is a node or an edge based on the prefix
                if prefix.startswith('nodes.item'):
                    nodes.append(current_item)
                elif prefix.startswith('edges.item'):
                    edges.append(current_item)


    return               # Return hops list and the number of routes > 1 if it is MPP
 
def main(json_file):
    # Load Lightning Network route from CSV file
    process_graph(json_file)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python nodenamer.py <json_file>")
        sys.exit(1)
    json_file = sys.argv[1]
    main(json_file)

